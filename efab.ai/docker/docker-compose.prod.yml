# Production Docker Compose configuration
version: '3.8'

services:
  # Production application service (replicated)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - ENABLE_AI_INTEGRATION=true
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=beverly_knits_prod
      - DB_USER=postgres
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - beverly-knits-network
    secrets:
      - db_password
      - api_key

  # Production ML inference service (replicated)
  ml-inference:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: ml-inference
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - ENVIRONMENT=production
      - ENABLE_AI_INTEGRATION=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ml_models:/app/models/trained:ro
      - app_logs:/app/logs
    depends_on:
      - redis
    networks:
      - beverly-knits-network

  # Production PostgreSQL with replication
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=beverly_knits_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/replication_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ../sql/init_prod.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - beverly-knits-network
    secrets:
      - db_password
      - replication_password

  # PostgreSQL replica for read operations
  postgres-replica:
    image: postgres:15-alpine
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/replication_password
      - POSTGRES_MASTER_SERVICE=postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - beverly-knits-network
    secrets:
      - replication_password

  # Redis cluster for high availability
  redis:
    image: redis:7-alpine
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    volumes:
      - redis_prod_data:/data
    networks:
      - beverly-knits-network
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  # Production Nginx with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
      - ml-inference
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - beverly-knits-network

  # Production monitoring stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_prod_data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - beverly-knits-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - beverly-knits-network
    secrets:
      - grafana_password

  # Log aggregation
  fluentd:
    image: fluent/fluentd:latest
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluentd.conf:ro
      - app_logs:/var/log/app:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - beverly-knits-network

  # Backup service
  backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=beverly_knits_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - backup_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - beverly-knits-network
    secrets:
      - db_password
    command: |
      bash -c "
        while true; do
          sleep 86400
          /backup.sh
        done
      "

secrets:
  db_password:
    external: true
  replication_password:
    external: true
  grafana_password:
    external: true
  api_key:
    external: true

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  ml_models:
    driver: local
  postgres_prod_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  backup_data:
    driver: local

networks:
  beverly-knits-network:
    driver: overlay
    attachable: true